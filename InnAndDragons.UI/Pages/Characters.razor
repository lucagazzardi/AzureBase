@page "/characters"

@using Microsoft.Extensions.Configuration;
@inject HttpClient Http;
@inject IConfiguration Configuration;

<h1>Personaggi</h1>

<Divider />

<AddCharacterModal OnCharacterAdded="@GetCharacters" @ref="addNewModal" />
<DeleteModal OnIsConfirmed="@GetCharacters" @ref="deleteModal" />
<DetailCharacterModal @ref="detailModal" />
<AddExperienceModal OnExpAdded="@GetCharacters" @ref="addExpModal" />


@if (characters == null)
{
    <Layout>
        <LayoutContent Style="text-align:center">
            <Figure Size="FigureSize.Is48x48">
                <FigureImage Source="loader.svg" AlternateText="Loader" />
            </Figure>
        </LayoutContent>
    </Layout>
}
else
{
    <Button Color="Color.Dark" Clicked="@ShowAddModal"><Icon Name="IconName.Add" /><span style="margin-left:5px">Crea</span></Button>

    <Table Margin="Margin.Is2.FromTop" Hoverable="true">
        <TableHeader ThemeContrast="ThemeContrast.Dark">
            <TableRow>
                <TableHeaderCell></TableHeaderCell>
                <TableHeaderCell>Nome</TableHeaderCell>
                <TableHeaderCell>Livello</TableHeaderCell>
                <TableHeaderCell>Classe</TableHeaderCell>
                <TableHeaderCell>Razza</TableHeaderCell>
                <TableHeaderCell>Esperienza</TableHeaderCell>
                <TableHeaderCell>Proprietario</TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var character in characters)
            {
                <TableRow>
                    <TableHeaderCell Style="text-align: center">
                        <Tooltip Text="Dettaglio" Placement="Placement.Top">
                            <Button Size="Size.ExtraSmall" Clicked="(() => ShowDetailModal(character.id))"><Icon Style="color:#343a40" Name="IconName.InfoCircle" /></Button>
                        </Tooltip>
                        <Tooltip Text="Aggiungi esperienza" Placement="Placement.Top">
                            <Button Size="Size.ExtraSmall" Clicked="(() => ShowExpModal(character.id, character.name, character.experience))"><Icon Style="color:#343a40" Name="IconName.Star" /></Button>
                        </Tooltip>
                        <Tooltip Text="Elimina" Placement="Placement.Top">
                            <Button Size="Size.ExtraSmall" Clicked="(() => ShowConfirmation(character.id))"><Icon Style="color:#343a40" Name="IconName.Delete" /></Button>
                        </Tooltip>
                    </TableHeaderCell>
                    <TableHeaderCell Style="vertical-align:middle">@character.name</TableHeaderCell>
                    <TableHeaderCell Style="vertical-align:middle">@character.level</TableHeaderCell>
                    <TableHeaderCell Style="vertical-align:middle">@character.classe</TableHeaderCell>
                    <TableHeaderCell Style="vertical-align:middle">@character.race</TableHeaderCell>
                    <TableHeaderCell Style="vertical-align:middle">@character.experience</TableHeaderCell>
                    <TableHeaderCell Style="vertical-align:middle">@character.owner</TableHeaderCell>
                </TableRow>
            }
        </TableBody>
    </Table>
}

@code {
    private AddCharacterModal addNewModal;
    private DeleteModal deleteModal;
    private DetailCharacterModal detailModal;
    private AddExperienceModal addExpModal;
    private List<Character> characters;

    protected override async Task OnInitializedAsync()
    {
        await GetCharacters();
    }

    private void ShowAddModal()
    {
        addNewModal.ShowModal();
    }

    private void ShowConfirmation(Guid characterId)
    {
        deleteModal.ShowModal(characterId);
    }

    private async Task ShowDetailModal(Guid characterId)
    {
        await detailModal.ShowModal(characterId);
    }

    private void ShowExpModal(Guid guid, string name, decimal exp)
    {
        addExpModal.ShowModal(guid, name, exp);
    }

    private async Task GetCharacters()
    {
        characters = await Http.GetFromJsonAsync<List<Character>>(string.Concat(Configuration["AzureUrl"], $"api/character/list"));
    }

}
