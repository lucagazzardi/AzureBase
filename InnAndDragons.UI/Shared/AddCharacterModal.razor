@using Microsoft.Extensions.Configuration;

@inject HttpClient Http;
@inject IConfiguration Configuration;

<Modal @ref="modalRef">
    <ModalContent IsCentered="true">
        <ModalHeader>
            <ModalTitle>Crea un personaggio</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Field>
                <FieldLabel Style="font-weight:bold">Nome</FieldLabel>
                <TextEdit @bind-Text="@newCharacter.name" Placeholder="Nome..." />
            </Field>

            <Field>
                <FieldLabel Style="font-weight:bold">Classe</FieldLabel>
                <Select @bind-SelectedValue="@newClasse" TValue="string">
                    @foreach (string classe in Enum.GetNames(typeof(Class)))
                    {
                        <SelectItem Value="@classe">@classe</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel Style="font-weight:bold">Razza</FieldLabel>
                <Select @bind-SelectedValue="@newRace" TValue="string">
                    @foreach (string race in Enum.GetNames(typeof(Race)))
                    {
                        <SelectItem Value="@race">@race</SelectItem>
                    }
                </Select>
            </Field>

            <Field>
                <FieldLabel Style="font-weight:bold">Livello</FieldLabel>
                <NumericEdit @bind-Value="@newCharacter.level" TValue="int" />
            </Field>
            <Field>
                <FieldLabel Style="font-weight:bold">Esperienza</FieldLabel>
                <NumericEdit @bind-Value="@newCharacter.experience" TValue="decimal" />
            </Field>
            <Field>
                <FieldLabel Style="font-weight:bold">Proprietario</FieldLabel>
                <TextEdit @bind-Text="@newCharacter.owner" Placeholder="Proprietario..." />
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="(() => HideModal(false))">Annulla</Button>
            <Button Color="Color.Primary" Clicked="(() => HideModal(true))">Aggiungi</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    private Character newCharacter { get; set; }
    private string newClasse { get; set; }
    private string newRace { get; set; }

    private Modal modalRef;

    [Parameter]
    public EventCallback OnCharacterAdded { get; set; }

    protected override void OnInitialized()
    {
        newCharacter = new Character();
    }

    public void ShowModal()
    {
        modalRef.Show();
    }

    public async Task HideModal(bool isConfirmed)
    {
        if (isConfirmed)
        {
            newCharacter.race = (Race)Enum.Parse(typeof(Race), newRace);
            newCharacter.classe = (Class)Enum.Parse(typeof(Class), newClasse);
            await Http.PostAsJsonAsync<Character>(string.Concat(Configuration["AzureUrl"], $"api/character/create"), newCharacter);
            await OnCharacterAdded.InvokeAsync();
        }
        modalRef.Hide();
    }

}
